<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tcgg&#39;s Blog</title>
    <link>https://xiaotian1339.github.io/</link>
    <description>Recent content on Tcgg&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 06 May 2021 21:32:09 -0400</lastBuildDate><atom:link href="https://xiaotian1339.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[C/C&#43;&#43;板块推荐阅读] 关于C,C&#43;&#43;表达式求值顺序.</title>
      <link>https://xiaotian1339.github.io/cdt/%E5%85%B3%E4%BA%8Ecc&#43;&#43;%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 06 May 2021 21:32:09 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E5%85%B3%E4%BA%8Ecc&#43;&#43;%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F/</guid>
      <description>最近这问题有从日经变时经的趋势，这里贴出裘老的解释。  裘宗燕：C/C++ 语言中的表达式求值 经常可以在一些讨论组里看到下面的提问：“谁知道下面C语句给n赋什么值？” m = 1; n = m+++m++;
最近有位不相识的朋友发email给我，问为什么在某个C++系统里，下面表达式打印出两个4，而不是4和5： a = 4; cout &amp;laquo; a++ &amp;laquo; a; C++ 不是规定 &amp;laquo; 操作左结合吗？是C++ 书上写错了，还是这个系统的实现有问题？
要弄清这些，需要理解的一个问题是：如果程序里某处修改了一个变量（通过赋值、增量/减量操作等），什么时候从该变量能够取到新值？有人可能说，“这算什么问题！我修改了变量，再从这个变量取值，取到的当然是修改后的值！”其实事情并不这么简单。
C/C++ 语言是“基于表达式的语言”，所有计算（包括赋值）都在表达式里完成。“x = 1;”就是表达式“x = 1”后加表示语句结束的分号。要弄清程序的意义，首先要理解表达式的意义，也就是： 1）表达式所确定的计算过程； 2）它对环境（可以把环境看作当时可用的所有变量）的影响。如果一个表达式（或子表达式）只计算出值而不改变环境，我们就说它是引用透明的，这种表达式早算晚算对其他计算没有影响（不改变计算的环境。当然，它的值可能受到其他计算的影响）。如果一个表达式不仅算出一个值，还修改了环境，就说这个表达式有副作用（因为它多做了额外的事）。a++ 就是有副作用的表达式。这些说法也适用于其他语言里的类似问题。
现在问题变成：如果C/C++ 程序里的某个表达式（部分）有副作用，这种副作用何时才能实际体现到使用中？
为使问题更清楚，我们假定程序里有代码片段“&amp;hellip;a[i]++ &amp;hellip; a[j] &amp;hellip;”，假定当时i与j的值恰好相等（a[i] 和a[j] 正好引用同一数组元素）；假定a[i]++ 确实在a[j] 之前计算；再假定其间没有其他修改a[i] 的动作。在这些假定下，a[i]++ 对 a[i] 的修改能反映到 a[j] 的求值中吗？注意：由于 i 与 j 相等的问题无法静态判定，在目标代码里，这两个数组元素访问（对内存的访问）必然通过两段独立代码完成。现代计算机的计算都在寄存器里做，问题现在变成：在取 a[j] 值的代码执行之前，a[i] 更新的值是否已经被（从寄存器）保存到内存？如果了解语言在这方面的规定，这个问题的答案就清楚了。
程序语言通常都规定了执行中变量修改的最晚实现时刻（称为顺序点、序点或执行点）。程序执行中存在一系列顺序点（时刻），语言保证一旦执行到达一个顺序点，在此之前发生的所有修改（副作用）都必须实现（必须反应到随后对同一存储位置的访问中），在此之后的所有修改都还没有发生。在顺序点之间则没有任何保证。对C/C++ 语言这类允许表达式有副作用的语言，顺序点的概念特别重要。
现在上面问题的回答已经很清楚了：如果在a[i]++ 和a[j] 之间存在一个顺序点，那么就能保证a[j] 将取得修改之后的值；否则就不能保证。
C/C++语言定义（语言的参考手册）明确定义了顺序点的概念。顺序点位于：
 每个完整表达式结束时。完整表达式包括变量初始化表达式，表达式语句，return语句的表达式，以及条件、循环和switch语句的控制表达式（for头部有三个控制表达式）； 运算符 &amp;amp;&amp;amp;、||、?: 和逗号运算符的第一个运算对象计算之后； 函数调用中对所有实际参数和函数名表达式（需要调用的函数也可能通过表达式描述）的求值完成之后（进入函数体之前）。 假设时刻ti和ti+1是前后相继的两个顺序点，到了ti+1，任何C/C++ 系统（VC、BC等都是C/C++系统）都必须实现ti之后发生的所有副作用。当然它们也可以不等到时刻ti+1，完全可以选择在时段 [t, ti+1] 之间的任何时刻实现在此期间出现的副作用，因为C/C++ 语言允许这些选择。  前面讨论中假定了a[i]++ 在a[i] 之前做。在一个程序片段里a[i]++ 究竟是否先做，还与它所在的表达式确定的计算过程有关。我们都熟悉C/C++ 语言有关优先级、结合性和括号的规定，而出现多个运算对象时的计算顺序却常常被人们忽略。</description>
    </item>
    
    <item>
      <title>[C/C&#43;&#43;板块推荐阅读] 关于C,C&#43;&#43;表达式求值顺序.</title>
      <link>https://xiaotian1339.github.io/posts/%E5%85%B3%E4%BA%8Ecc&#43;&#43;%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F/</link>
      <pubDate>Thu, 06 May 2021 21:32:09 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E5%85%B3%E4%BA%8Ecc&#43;&#43;%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E9%A1%BA%E5%BA%8F/</guid>
      <description>最近这问题有从日经变时经的趋势，这里贴出裘老的解释。  裘宗燕：C/C++ 语言中的表达式求值 经常可以在一些讨论组里看到下面的提问：“谁知道下面C语句给n赋什么值？” m = 1; n = m+++m++;
最近有位不相识的朋友发email给我，问为什么在某个C++系统里，下面表达式打印出两个4，而不是4和5： a = 4; cout &amp;laquo; a++ &amp;laquo; a; C++ 不是规定 &amp;laquo; 操作左结合吗？是C++ 书上写错了，还是这个系统的实现有问题？
要弄清这些，需要理解的一个问题是：如果程序里某处修改了一个变量（通过赋值、增量/减量操作等），什么时候从该变量能够取到新值？有人可能说，“这算什么问题！我修改了变量，再从这个变量取值，取到的当然是修改后的值！”其实事情并不这么简单。
C/C++ 语言是“基于表达式的语言”，所有计算（包括赋值）都在表达式里完成。“x = 1;”就是表达式“x = 1”后加表示语句结束的分号。要弄清程序的意义，首先要理解表达式的意义，也就是： 1）表达式所确定的计算过程； 2）它对环境（可以把环境看作当时可用的所有变量）的影响。如果一个表达式（或子表达式）只计算出值而不改变环境，我们就说它是引用透明的，这种表达式早算晚算对其他计算没有影响（不改变计算的环境。当然，它的值可能受到其他计算的影响）。如果一个表达式不仅算出一个值，还修改了环境，就说这个表达式有副作用（因为它多做了额外的事）。a++ 就是有副作用的表达式。这些说法也适用于其他语言里的类似问题。
现在问题变成：如果C/C++ 程序里的某个表达式（部分）有副作用，这种副作用何时才能实际体现到使用中？
为使问题更清楚，我们假定程序里有代码片段“&amp;hellip;a[i]++ &amp;hellip; a[j] &amp;hellip;”，假定当时i与j的值恰好相等（a[i] 和a[j] 正好引用同一数组元素）；假定a[i]++ 确实在a[j] 之前计算；再假定其间没有其他修改a[i] 的动作。在这些假定下，a[i]++ 对 a[i] 的修改能反映到 a[j] 的求值中吗？注意：由于 i 与 j 相等的问题无法静态判定，在目标代码里，这两个数组元素访问（对内存的访问）必然通过两段独立代码完成。现代计算机的计算都在寄存器里做，问题现在变成：在取 a[j] 值的代码执行之前，a[i] 更新的值是否已经被（从寄存器）保存到内存？如果了解语言在这方面的规定，这个问题的答案就清楚了。
程序语言通常都规定了执行中变量修改的最晚实现时刻（称为顺序点、序点或执行点）。程序执行中存在一系列顺序点（时刻），语言保证一旦执行到达一个顺序点，在此之前发生的所有修改（副作用）都必须实现（必须反应到随后对同一存储位置的访问中），在此之后的所有修改都还没有发生。在顺序点之间则没有任何保证。对C/C++ 语言这类允许表达式有副作用的语言，顺序点的概念特别重要。
现在上面问题的回答已经很清楚了：如果在a[i]++ 和a[j] 之间存在一个顺序点，那么就能保证a[j] 将取得修改之后的值；否则就不能保证。
C/C++语言定义（语言的参考手册）明确定义了顺序点的概念。顺序点位于：
 每个完整表达式结束时。完整表达式包括变量初始化表达式，表达式语句，return语句的表达式，以及条件、循环和switch语句的控制表达式（for头部有三个控制表达式）； 运算符 &amp;amp;&amp;amp;、||、?: 和逗号运算符的第一个运算对象计算之后； 函数调用中对所有实际参数和函数名表达式（需要调用的函数也可能通过表达式描述）的求值完成之后（进入函数体之前）。 假设时刻ti和ti+1是前后相继的两个顺序点，到了ti+1，任何C/C++ 系统（VC、BC等都是C/C++系统）都必须实现ti之后发生的所有副作用。当然它们也可以不等到时刻ti+1，完全可以选择在时段 [t, ti+1] 之间的任何时刻实现在此期间出现的副作用，因为C/C++ 语言允许这些选择。  前面讨论中假定了a[i]++ 在a[i] 之前做。在一个程序片段里a[i]++ 究竟是否先做，还与它所在的表达式确定的计算过程有关。我们都熟悉C/C++ 语言有关优先级、结合性和括号的规定，而出现多个运算对象时的计算顺序却常常被人们忽略。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - 表达式求值顺序</title>
      <link>https://xiaotian1339.github.io/cdt/cshunxu/</link>
      <pubDate>Thu, 06 May 2021 21:22:14 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/cshunxu/</guid>
      <description>在C++里，表达式求值顺序一直是一个大坑，这是由于为了给编译器更大的优化空间，C++对表达式的求值做了许多非常灵活的规定（其实就是不规定，编译器愿意怎么实现都可以）。这些灵活的规定也给C++带来了许多在其它语言中不存在的未定义行为（undefined behavior），比如i=i++，甚至有一些是标准委员会都没有预想到。
在C++03里，表达式的求值顺序依靠序列点（sequency point）来定义。有关序列点的介绍，在 这里 和 这里 可以见到。但是其中也提到了序列点所存在的一些问题。到了C++11，标准委员会放弃了序列点，而使用了一种新的方式定义表达的求值顺序。两种定义的结果大同小异，这里使用C++11的定义方式，介绍一下C++中的表达式求值。
C++11中还引入线程的概念，不过这里讨论的是同一线程中表达式的求值顺序，不讨论不同线程之间的顺序与同步的问题。
一些定义    side effect 副作用    访问（读或写）volatile的变量，修改一个对象（变量），调用系统I/O函数，或调用会发生以上三种行为函数，统称为副作用。对表达式的求值，不只包括求出表达式值（即返回值，value computation），还包括完成表达式中的包含的各种副作为。
如
int i=1; i++; // 对其求值包括两部分，计算返回值（1），以及其副作用（将i赋值为2）
full-expression 完整表达式    一个完整式指不是其它表达式子表达式的表达式。
一个表达式可以包含子表达式，也可以成为其它表达式的一部分，如(y=i+1)!=0; 中，y=i+1 包含子表达式 i+1 ,同时它是整个表达式(y=i+1)!=0的一个子表达式。在这里(y=i+1)!=0就是一个完整表达式。
一个完整表达式包括根据表达式所在上下文成生成类型转换，以及临时变量的析构。
struct S { S(int i): I(i) { } int&amp;amp; v() { return I; } private: int I; }; void f() { if (S(3).v()) // if 内部部分构成一个完整表达式。  // 在函数求值后的左值到右值的转换(int&amp;amp; --&amp;gt; int)，以及 int --&amp;gt; bool 的转换（由于其出现在if条件判断中，所以需要转换为 bool)，  // 以及S(3)临时变量的析构都是这一完整表达式的一部分。  { } } 完整表达式还会包含一些表面上没有出现在这个表达式中的内容，如函数调用表达式中，默认参数的计算是完整表达式的一部分，虽然默认参数并不出现在这个表达式中。</description>
    </item>
    
    <item>
      <title>C&#43;&#43; - 表达式求值顺序</title>
      <link>https://xiaotian1339.github.io/posts/cshunxu/</link>
      <pubDate>Thu, 06 May 2021 21:22:14 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/cshunxu/</guid>
      <description>在C++里，表达式求值顺序一直是一个大坑，这是由于为了给编译器更大的优化空间，C++对表达式的求值做了许多非常灵活的规定（其实就是不规定，编译器愿意怎么实现都可以）。这些灵活的规定也给C++带来了许多在其它语言中不存在的未定义行为（undefined behavior），比如i=i++，甚至有一些是标准委员会都没有预想到。
在C++03里，表达式的求值顺序依靠序列点（sequency point）来定义。有关序列点的介绍，在 这里 和 这里 可以见到。但是其中也提到了序列点所存在的一些问题。到了C++11，标准委员会放弃了序列点，而使用了一种新的方式定义表达的求值顺序。两种定义的结果大同小异，这里使用C++11的定义方式，介绍一下C++中的表达式求值。
C++11中还引入线程的概念，不过这里讨论的是同一线程中表达式的求值顺序，不讨论不同线程之间的顺序与同步的问题。
一些定义    side effect 副作用    访问（读或写）volatile的变量，修改一个对象（变量），调用系统I/O函数，或调用会发生以上三种行为函数，统称为副作用。对表达式的求值，不只包括求出表达式值（即返回值，value computation），还包括完成表达式中的包含的各种副作为。
如
int i=1; i++; // 对其求值包括两部分，计算返回值（1），以及其副作用（将i赋值为2）
full-expression 完整表达式    一个完整式指不是其它表达式子表达式的表达式。
一个表达式可以包含子表达式，也可以成为其它表达式的一部分，如(y=i+1)!=0; 中，y=i+1 包含子表达式 i+1 ,同时它是整个表达式(y=i+1)!=0的一个子表达式。在这里(y=i+1)!=0就是一个完整表达式。
一个完整表达式包括根据表达式所在上下文成生成类型转换，以及临时变量的析构。
struct S { S(int i): I(i) { } int&amp;amp; v() { return I; } private: int I; }; void f() { if (S(3).v()) // if 内部部分构成一个完整表达式。  // 在函数求值后的左值到右值的转换(int&amp;amp; --&amp;gt; int)，以及 int --&amp;gt; bool 的转换（由于其出现在if条件判断中，所以需要转换为 bool)，  // 以及S(3)临时变量的析构都是这一完整表达式的一部分。  { } } 完整表达式还会包含一些表面上没有出现在这个表达式中的内容，如函数调用表达式中，默认参数的计算是完整表达式的一部分，虽然默认参数并不出现在这个表达式中。</description>
    </item>
    
    <item>
      <title>C程序设计实用教程P36{5}（2）的问题</title>
      <link>https://xiaotian1339.github.io/cdt/problem1/</link>
      <pubDate>Fri, 30 Apr 2021 04:19:27 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/problem1/</guid>
      <description>例如这个代码：
#include&amp;lt;stdio.h&amp;gt;void main() { char c1,c2; c1 = 197; c2 = 198; printf(&amp;#34;c1 = %c,c2 = %c\n&amp;#34;,c1,c2 ); printf(&amp;#34;c1 = %d,c2 = %d&amp;#34;,c1,c2); return; } 返回的是
c1 = ?c2 = ? c1 = -59,c2 = -58  对于第一行C1 = ？ C2 = ？
%c问号的原因是因为找不到对应的ASCII字符。可以转变终端编码显示！
 第二行输出负数的问题：
这是一个简单而又复杂的问题。
首先， %c 和 %d 都要求对应的变参是 int 类型。唯一不同的是，%c 是将这个 int 类型的变参转换为 unsigned char 类型的字符，然后予以显示，而 %d 则是将它转换为有符号十进制格式的数字字符予以显示。
其次，程序是没有问题的。尽管传入的变参是 char 类型的，但依照默认实参转换（default argument conversion）的规则，它是被转换为 int 类型之后传递给 printf 的。</description>
    </item>
    
    <item>
      <title>C程序设计实用教程P36{5}（2）的问题</title>
      <link>https://xiaotian1339.github.io/posts/problem1/</link>
      <pubDate>Fri, 30 Apr 2021 04:19:27 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/problem1/</guid>
      <description>例如这个代码：
#include&amp;lt;stdio.h&amp;gt;void main() { char c1,c2; c1 = 197; c2 = 198; printf(&amp;#34;c1 = %c,c2 = %c\n&amp;#34;,c1,c2 ); printf(&amp;#34;c1 = %d,c2 = %d&amp;#34;,c1,c2); return; } 返回的是
c1 = ?c2 = ? c1 = -59,c2 = -58  对于第一行C1 = ？ C2 = ？
%c问号的原因是因为找不到对应的ASCII字符。可以转变终端编码显示！
 第二行输出负数的问题：
这是一个简单而又复杂的问题。
首先， %c 和 %d 都要求对应的变参是 int 类型。唯一不同的是，%c 是将这个 int 类型的变参转换为 unsigned char 类型的字符，然后予以显示，而 %d 则是将它转换为有符号十进制格式的数字字符予以显示。
其次，程序是没有问题的。尽管传入的变参是 char 类型的，但依照默认实参转换（default argument conversion）的规则，它是被转换为 int 类型之后传递给 printf 的。</description>
    </item>
    
    <item>
      <title>C练习1</title>
      <link>https://xiaotian1339.github.io/cdt/ctest1/</link>
      <pubDate>Thu, 29 Apr 2021 03:33:18 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/ctest1/</guid>
      <description>练习3-4 统计字符 (15 分)    本题要求编写程序，输入10个字符，统计其中英文字母、空格或回车、数字字符和其他字符的个数。
输入格式:    输入为10个字符。最后一个回车表示输入结束，不算在内。
输出格式:    在一行内按照
letter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数 的格式输出。
输入样例:    aZ &amp;amp; 09 Az 输出样例:    letter = 4, blank = 3, digit = 2, other = 1 练习3-5 输出闰年 (15 分)    输出21世纪中截止某个年份以来的所有闰年年份。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。
输入格式:    输入在一行中给出21世纪的某个截止年份。
输出格式:    逐行输出满足条件的所有闰年年份，即每个年份占一行。输入若非21世纪的年份则输出&amp;quot;Invalid year!</description>
    </item>
    
    <item>
      <title>C练习1</title>
      <link>https://xiaotian1339.github.io/posts/ctest1/</link>
      <pubDate>Thu, 29 Apr 2021 03:33:18 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/ctest1/</guid>
      <description>练习3-4 统计字符 (15 分)    本题要求编写程序，输入10个字符，统计其中英文字母、空格或回车、数字字符和其他字符的个数。
输入格式:    输入为10个字符。最后一个回车表示输入结束，不算在内。
输出格式:    在一行内按照
letter = 英文字母个数, blank = 空格或回车个数, digit = 数字字符个数, other = 其他字符个数 的格式输出。
输入样例:    aZ &amp;amp; 09 Az 输出样例:    letter = 4, blank = 3, digit = 2, other = 1 练习3-5 输出闰年 (15 分)    输出21世纪中截止某个年份以来的所有闰年年份。注意：闰年的判别条件是该年年份能被4整除但不能被100整除、或者能被400整除。
输入格式:    输入在一行中给出21世纪的某个截止年份。
输出格式:    逐行输出满足条件的所有闰年年份，即每个年份占一行。输入若非21世纪的年份则输出&amp;quot;Invalid year!</description>
    </item>
    
    <item>
      <title>**统计学生平均成绩与及格人数**</title>
      <link>https://xiaotian1339.github.io/cdt/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E7%94%9F%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%E4%B8%8E%E5%8F%8A%E6%A0%BC%E4%BA%BA%E6%95%B0/</link>
      <pubDate>Fri, 02 Apr 2021 04:32:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E7%94%9F%E5%B9%B3%E5%9D%87%E6%88%90%E7%BB%A9%E4%B8%8E%E5%8F%8A%E6%A0%BC%E4%BA%BA%E6%95%B0/</guid>
      <description>*统计学生平均成绩与及格人数    本题要求编写程序，计算学生们的平均成绩，并统计及格（成绩不低于60分）的人数。题目保证输入与输出均在整型范围内。
输入格式:    输入在第一行中给出非负整数N，即学生人数。第二行给出N个非负整数，即这N位学生的成绩，其间以空格分隔。
输出格式:    按照以下格式输出：
caverage = 成绩均值 count = 及格人数 其中平均值精确到小数点后一位。
输入样例:    5 77 54 92 73 60 输出样例:    average = 71.2 count = 4  解题代码：    #include&amp;lt;stdio.h&amp;gt;int main() { int n; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); if(n&amp;gt;=0){ //判断输入是否为0人  if(n==0){ printf(&amp;#34;average = 0.0\n&amp;#34;); printf(&amp;#34;count = 0&amp;#34;); } else{ int i; int sum=0; int temp=0; for(i=1;i&amp;lt;=n;i++) { int t; scanf(&amp;#34;%d&amp;#34;,&amp;amp;t); sum+=t; if(t&amp;gt;=60) temp++; } printf(&amp;#34;average = %.</description>
    </item>
    
    <item>
      <title>**求平方与倒数序列的部分和**</title>
      <link>https://xiaotian1339.github.io/cdt/%E6%B1%82%E5%B9%B3%E6%96%B9%E4%B8%8E%E5%80%92%E6%95%B0%E5%BA%8F%E5%88%97%E7%9A%84%E9%83%A8%E5%88%86%E5%92%8C/</link>
      <pubDate>Thu, 01 Apr 2021 04:32:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E6%B1%82%E5%B9%B3%E6%96%B9%E4%B8%8E%E5%80%92%E6%95%B0%E5%BA%8F%E5%88%97%E7%9A%84%E9%83%A8%E5%88%86%E5%92%8C/</guid>
      <description>本题要求对两个正整数m和n（m≤n）编写程序，计算序列和m^2+1/m+(m+1)^2+1/(m+1)+⋯+n^2+1/n。
输入格式:    输入在一行中给出两个正整数m和n（m≤n），其间以空格分开。
输出格式:    在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后六位。题目保证计算结果不超过双精度范围。
输入样例:    5 10 输出样例:    sum = 355.845635 审题：    简单For循环语句
解题代码：    //m^2+1/m+(m+1)^2+1/(m+1)+……+n^2+1/n #include &amp;lt;stdio.h&amp;gt;int main(){ int m = 0,n = 0; double sum = 0.0; scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n); for (int i = m; i &amp;lt;= n; i++) { /* code */ sum += (i*i)+(1.0/i); } printf(&amp;#34;sum = %.</description>
    </item>
    
    <item>
      <title>实现函数输出n行数字金字塔</title>
      <link>https://xiaotian1339.github.io/cdt/%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BAn%E8%A1%8C%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/</link>
      <pubDate>Wed, 31 Mar 2021 04:47:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BAn%E8%A1%8C%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/</guid>
      <description>实现函数输出n行数字金字塔    函数接口定义：    void pyramid( int n ); 其中n是用户传入的参数，为[1, 9]的正整数。要求函数按照如样例所示的格式打印出n行数字金字塔。注意每个数字后面跟一个空格。
初始代码：    #include &amp;lt;stdio.h&amp;gt; void pyramid( int n ); int main() { int n; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); pyramid(n); return 0; } /* 你的代码将被嵌在这里 */ 输入样例：    5 输出样例：    1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 解题思路：    首先观察
n 决定一共有几行 例如输入 5 就是有五层</description>
    </item>
    
    <item>
      <title>实现函数输出n行数字金字塔</title>
      <link>https://xiaotian1339.github.io/posts/%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BAn%E8%A1%8C%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/</link>
      <pubDate>Wed, 31 Mar 2021 04:47:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E5%AE%9E%E7%8E%B0%E5%87%BD%E6%95%B0%E8%BE%93%E5%87%BAn%E8%A1%8C%E6%95%B0%E5%AD%97%E9%87%91%E5%AD%97%E5%A1%94/</guid>
      <description>实现函数输出n行数字金字塔    函数接口定义：    void pyramid( int n ); 其中n是用户传入的参数，为[1, 9]的正整数。要求函数按照如样例所示的格式打印出n行数字金字塔。注意每个数字后面跟一个空格。
初始代码：    #include &amp;lt;stdio.h&amp;gt; void pyramid( int n ); int main() { int n; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); pyramid(n); return 0; } /* 你的代码将被嵌在这里 */ 输入样例：    5 输出样例：    1 2 2 3 3 3 4 4 4 4 5 5 5 5 5 解题思路：    首先观察
n 决定一共有几行 例如输入 5 就是有五层</description>
    </item>
    
    <item>
      <title>求组合数</title>
      <link>https://xiaotian1339.github.io/cdt/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0/</link>
      <pubDate>Wed, 31 Mar 2021 04:46:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0/</guid>
      <description>求组合数    题目：    本题要求编写程序，根据公式算出从n个不同元素中取出m个元素（m≤n）的组合数
建议定义和调用函数fact(n)计算n!，其中n的类型是int，函数类型是double。
输入格式:    输入在一行中给出两个正整数m和n（m≤n），以空格分隔。
输出格式:    按照格式“result = 组合数计算结果”输出。题目保证结果在double类型范围内。
输入样例:    2 7 输出样例:    result = 21  审题：    由高中只是可以知道，求组合数的公式n！/【m！（n-m）！】。需要用到阶乘。对于多次求阶乘这个单一的动作，可以单独写为一个函数，结合题目的建议，定义fact（）函数，然后直接代入即可。
 解题代码：    #include&amp;lt;stdio.h&amp;gt;double fact(int ); int main(){ int m,n; int r; scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n); r=fact(n)/(fact(m)*fact((n-m))); printf(&amp;#34;result = %d&amp;#34;,r); } double fact(int m){ double a,b=1; for (a = m ; a &amp;gt; 0 ; a--) { b *= a; } return b; }  解题结束。</description>
    </item>
    
    <item>
      <title>求组合数</title>
      <link>https://xiaotian1339.github.io/posts/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0/</link>
      <pubDate>Wed, 31 Mar 2021 04:46:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E6%B1%82%E7%BB%84%E5%90%88%E6%95%B0/</guid>
      <description>求组合数    题目：    本题要求编写程序，根据公式算出从n个不同元素中取出m个元素（m≤n）的组合数
建议定义和调用函数fact(n)计算n!，其中n的类型是int，函数类型是double。
输入格式:    输入在一行中给出两个正整数m和n（m≤n），以空格分隔。
输出格式:    按照格式“result = 组合数计算结果”输出。题目保证结果在double类型范围内。
输入样例:    2 7 输出样例:    result = 21  审题：    由高中只是可以知道，求组合数的公式n！/【m！（n-m）！】。需要用到阶乘。对于多次求阶乘这个单一的动作，可以单独写为一个函数，结合题目的建议，定义fact（）函数，然后直接代入即可。
 解题代码：    double fact(int ); int main(){ int m,n; int r; scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;m,&amp;amp;n); r=fact(n)/(fact(m)*fact((n-m))); printf(&amp;#34;result = %d&amp;#34;,r); } double fact(int m){ double a,b=1; for (a = m ; a &amp;gt; 0 ; a--) { b *= a; } return b; }```  解题结束。</description>
    </item>
    
    <item>
      <title>**求简单交错序列前N项和**</title>
      <link>https://xiaotian1339.github.io/cdt/%E6%B1%82%E7%AE%80%E5%8D%95%E4%BA%A4%E9%94%99%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</link>
      <pubDate>Wed, 31 Mar 2021 04:44:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E6%B1%82%E7%AE%80%E5%8D%95%E4%BA%A4%E9%94%99%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</guid>
      <description>求简单交错序列前N项和    要求    本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + &amp;hellip; 的前N项之和。
输入格式:    输入在一行中给出一个正整数N。
输出格式:    在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。
输入样例:    10 输出样例:    sum = 0.819  审题：    简单的找规律和for循环。
 注意事项：    前N项的循环体语句3中使用i++，不要使用i+3。犯了一个这个错，自己去loop一下就知道区别了……
 解题代码：    #include&amp;lt;stdio.h&amp;gt;int main(){ double sum = 0.0; int n=0,i=0,sign = 1; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for (i = 1; i &amp;lt;= n; i++) { sum += 1.</description>
    </item>
    
    <item>
      <title>**求简单交错序列前N项和**</title>
      <link>https://xiaotian1339.github.io/posts/%E6%B1%82%E7%AE%80%E5%8D%95%E4%BA%A4%E9%94%99%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</link>
      <pubDate>Wed, 31 Mar 2021 04:44:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E6%B1%82%E7%AE%80%E5%8D%95%E4%BA%A4%E9%94%99%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</guid>
      <description>求简单交错序列前N项和    要求    本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + &amp;hellip; 的前N项之和。
输入格式:    输入在一行中给出一个正整数N。
输出格式:    在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。
输入样例:    10 输出样例:    sum = 0.819  审题：    简单的找规律和for循环。
 注意事项：    前N项的循环体语句3中使用i++，不要使用i+3。犯了一个这个错，自己去loop一下就知道区别了……
 解题代码：    #include&amp;lt;stdio.h&amp;gt;int main(){ double sum = 0.0; int n=0,i=0,sign = 1; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for (i = 1; i &amp;lt;= n; i++) { sum += 1.</description>
    </item>
    
    <item>
      <title>**求N分之一序列前N项和**</title>
      <link>https://xiaotian1339.github.io/cdt/%E6%B1%82n%E5%88%86%E4%B9%8B%E4%B8%80%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</link>
      <pubDate>Wed, 31 Mar 2021 04:41:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E6%B1%82n%E5%88%86%E4%B9%8B%E4%B8%80%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</guid>
      <description>求N分之一序列前N项和    题目：    本题要求编写程序，计算序列 1 + 1/2 + 1/3 + &amp;hellip; 的前N项之和。
输入格式:    输入在一行中给出一个正整数N。
输出格式:    在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。
输入样例:    6 输出样例:    sum = 2.450000  审题：    简单的for循环。
 #include&amp;lt;stdio.h&amp;gt;int main(){ double sum = 0.0; int n=0,i=0; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for (i = 1; i &amp;lt;= n; i++) { sum += 1.0/i; } printf(&amp;#34;sum = %.</description>
    </item>
    
    <item>
      <title>**求N分之一序列前N项和**</title>
      <link>https://xiaotian1339.github.io/posts/%E6%B1%82n%E5%88%86%E4%B9%8B%E4%B8%80%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</link>
      <pubDate>Wed, 31 Mar 2021 04:41:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E6%B1%82n%E5%88%86%E4%B9%8B%E4%B8%80%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C/</guid>
      <description>求N分之一序列前N项和    题目：    本题要求编写程序，计算序列 1 + 1/2 + 1/3 + &amp;hellip; 的前N项之和。
输入格式:    输入在一行中给出一个正整数N。
输出格式:    在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后6位。题目保证计算结果不超过双精度范围。
输入样例:    6 输出样例:    sum = 2.450000  审题：    简单的for循环。
 #include&amp;lt;stdio.h&amp;gt;int main(){ double sum = 0.0; int n=0,i=0; scanf(&amp;#34;%d&amp;#34;,&amp;amp;n); for (i = 1; i &amp;lt;= n; i++) { sum += 1.0/i; } printf(&amp;#34;sum = %.</description>
    </item>
    
    <item>
      <title> **输出华氏-摄氏温度转换表**</title>
      <link>https://xiaotian1339.github.io/cdt/%E8%BE%93%E5%87%BA%E5%8D%8E%E6%B0%8F-%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E8%A1%A8/</link>
      <pubDate>Wed, 31 Mar 2021 04:40:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/cdt/%E8%BE%93%E5%87%BA%E5%8D%8E%E6%B0%8F-%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E8%A1%A8/</guid>
      <description>输出华氏-摄氏温度转换表    题目：    输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。
温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。
 输入格式:    在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开。
输出格式:    第一行输出：&amp;ldquo;fahr celsius&amp;rdquo;
接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。
若输入的范围不合法，则输出&amp;quot;Invalid.&amp;quot;。
输入样例1:    32 35 输出样例1:    fahr celsius 32 0.0 34 1.1 输入样例2:    40 30 输出样例2:    Invalid.  审题：    if判断区间，循环输出结果的简单题。
 解题代码：    #include&amp;lt;stdio.h&amp;gt;int main(){ int f,lower,upper; float c; scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;lower,&amp;amp;upper); if (lower&amp;lt;=upper) { printf(&amp;#34;fahr celsius\n&amp;#34;); for (f = lower; f &amp;lt;= upper;f=f+2 ) { printf(&amp;#34;%d%6.</description>
    </item>
    
    <item>
      <title> **输出华氏-摄氏温度转换表**</title>
      <link>https://xiaotian1339.github.io/posts/%E8%BE%93%E5%87%BA%E5%8D%8E%E6%B0%8F-%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E8%A1%A8/</link>
      <pubDate>Wed, 31 Mar 2021 04:40:24 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E8%BE%93%E5%87%BA%E5%8D%8E%E6%B0%8F-%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%E8%BD%AC%E6%8D%A2%E8%A1%A8/</guid>
      <description>输出华氏-摄氏温度转换表    题目：    输入2个正整数lower和upper（lower≤upper≤100），请输出一张取值范围为[lower，upper]、且每次增加2华氏度的华氏-摄氏温度转换表。
温度转换的计算公式：C=5×(F−32)/9，其中：C表示摄氏温度，F表示华氏温度。
 输入格式:    在一行中输入2个整数，分别表示lower和upper的值，中间用空格分开。
输出格式:    第一行输出：&amp;ldquo;fahr celsius&amp;rdquo;
接着每行输出一个华氏温度fahr（整型）与一个摄氏温度celsius（占据6个字符宽度，靠右对齐，保留1位小数）。
若输入的范围不合法，则输出&amp;quot;Invalid.&amp;quot;。
输入样例1:    32 35 输出样例1:    fahr celsius 32 0.0 34 1.1 输入样例2:    40 30 输出样例2:    Invalid.  审题：    if判断区间，循环输出结果的简单题。
 解题代码：    #include&amp;lt;stdio.h&amp;gt;int main(){ int f,lower,upper; float c; scanf(&amp;#34;%d %d&amp;#34;,&amp;amp;lower,&amp;amp;upper); if (lower&amp;lt;=upper) { printf(&amp;#34;fahr celsius\n&amp;#34;); for (f = lower; f &amp;lt;= upper;f=f+2 ) { printf(&amp;#34;%d%6.</description>
    </item>
    
    <item>
      <title>第四次上机报告第二题</title>
      <link>https://xiaotian1339.github.io/baogao/fourth-c2/</link>
      <pubDate>Sun, 28 Mar 2021 23:09:35 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/baogao/fourth-c2/</guid>
      <description>第四次上机报告    第二题    （简单）编程实现某中药房药材按使用频率存放。使用频率越高的药，存放到越近的区域。其中A区存放频率大于或等于50%的药，B区存放使用频率为40%-50%的药，C区存放使用频率为30%-40%的药，D区存放使用频率为20%-30%的药，E区存放使用频率小于20%的药。    #include&amp;lt;stdio.h&amp;gt;main() { float pl; int a,b,c,d; a=50,b=40,c=30,d=20; printf(&amp;#34;请输入该药材使用频率(%%)：\n&amp;#34;); scanf(&amp;#34;%f&amp;#34;,&amp;amp;pl); if (pl&amp;gt;=a)//放入A区 	{ printf(&amp;#34;该药品使用频率很高，请放入A区\n&amp;#34;); } else if (pl&amp;gt;=b)//放入B区 	{ printf(&amp;#34;该药品使用频率较高，请放入B区。\n&amp;#34;); } else if (pl&amp;gt;=c)//放入C区 	{ printf(&amp;#34;该药品使用频率中等，请放入C区\n&amp;#34;); } else if(pl &amp;gt;=d)//放入D区 	{ printf(&amp;#34;该药品使用频率较低，请放入D区\n&amp;#34;); } else//放入E区 	{ printf(&amp;#34;该药品使用频率过低，请放入E区。\n&amp;#34;); }    运行结果    </description>
    </item>
    
    <item>
      <title>第四次上机报告第二题</title>
      <link>https://xiaotian1339.github.io/posts/fourth-c2/</link>
      <pubDate>Sun, 28 Mar 2021 23:09:35 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/fourth-c2/</guid>
      <description>第四次上机报告    第二题    （简单）编程实现某中药房药材按使用频率存放。使用频率越高的药，存放到越近的区域。其中A区存放频率大于或等于50%的药，B区存放使用频率为40%-50%的药，C区存放使用频率为30%-40%的药，D区存放使用频率为20%-30%的药，E区存放使用频率小于20%的药。    #include&amp;lt;stdio.h&amp;gt;main() { float pl; int a,b,c,d; a=50,b=40,c=30,d=20; printf(&amp;#34;请输入该药材使用频率(%%)：\n&amp;#34;); scanf(&amp;#34;%f&amp;#34;,&amp;amp;pl); if (pl&amp;gt;=a)//放入A区 	{ printf(&amp;#34;该药品使用频率很高，请放入A区\n&amp;#34;); } else if (pl&amp;gt;=b)//放入B区 	{ printf(&amp;#34;该药品使用频率较高，请放入B区。\n&amp;#34;); } else if (pl&amp;gt;=c)//放入C区 	{ printf(&amp;#34;该药品使用频率中等，请放入C区\n&amp;#34;); } else if(pl &amp;gt;=d)//放入D区 	{ printf(&amp;#34;该药品使用频率较低，请放入D区\n&amp;#34;); } else//放入E区 	{ printf(&amp;#34;该药品使用频率过低，请放入E区。\n&amp;#34;); }    运行结果    </description>
    </item>
    
    <item>
      <title>计算平均分</title>
      <link>https://xiaotian1339.github.io/posts/fifth-c1/</link>
      <pubDate>Sun, 28 Mar 2021 22:12:07 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/fifth-c1/</guid>
      <description>计算平均分     #include&amp;lt;stdio.h&amp;gt;main() { float score,a,n; a=0,n=0;//变量初始化 	do//直到循环 	{ printf(&amp;#34;请输入您的成绩(以负数结束)：\n&amp;#34;); scanf(&amp;#34;%f&amp;#34;,&amp;amp;score); a+=score; n++; }while(score&amp;gt;0); a=(a-score)/--n;//n先自减在运算 	printf(&amp;#34;平均分为%.3f\n&amp;#34;,a); }  运行结果    [</description>
    </item>
    
    <item>
      <title>第四次上机报告第一题</title>
      <link>https://xiaotian1339.github.io/baogao/fourth-c1/</link>
      <pubDate>Sun, 28 Mar 2021 01:55:00 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/baogao/fourth-c1/</guid>
      <description> 某商场的设备能通过红外线自动检测人体温度并输入计算机。先要求编写程序、实现如下功能:如果输入的体温超过37摄氏度，则显示相应警报，提示禁止入内，以降低疫情传播风险。    #include&amp;lt;stdio.h&amp;gt;main() { float temperature; int normal;//定义正常温度 	normal=37;//初始化 	printf(&amp;#34;欢迎使用温度检测系统\n&amp;#34;);//功能 	printf(&amp;#34;请输入您的温度：\n&amp;#34;);//提示输入温度 	scanf(&amp;#34;%f&amp;#34;,&amp;amp;temperature); if (temperature&amp;gt;normal) { printf(&amp;#34;禁止入内，您的温度过高。\n&amp;#34;); } else { printf(&amp;#34;欢迎光临本商城！\n&amp;#34;); } }  运行结果    [ </description>
    </item>
    
    <item>
      <title>第四次上机报告第一题</title>
      <link>https://xiaotian1339.github.io/posts/fourth-c1/</link>
      <pubDate>Sun, 28 Mar 2021 01:55:00 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/fourth-c1/</guid>
      <description> 某商场的设备能通过红外线自动检测人体温度并输入计算机。先要求编写程序、实现如下功能:如果输入的体温超过37摄氏度，则显示相应警报，提示禁止入内，以降低疫情传播风险。    #include&amp;lt;stdio.h&amp;gt;main() { float temperature; int normal;//定义正常温度 	normal=37;//初始化 	printf(&amp;#34;欢迎使用温度检测系统\n&amp;#34;);//功能 	printf(&amp;#34;请输入您的温度：\n&amp;#34;);//提示输入温度 	scanf(&amp;#34;%f&amp;#34;,&amp;amp;temperature); if (temperature&amp;gt;normal) { printf(&amp;#34;禁止入内，您的温度过高。\n&amp;#34;); } else { printf(&amp;#34;欢迎光临本商城！\n&amp;#34;); } }  运行结果    [ </description>
    </item>
    
    <item>
      <title>第四次上机报告第三题</title>
      <link>https://xiaotian1339.github.io/baogao/fourth-c3/</link>
      <pubDate>Sat, 27 Mar 2021 23:07:27 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/baogao/fourth-c3/</guid>
      <description>第四次上机报告    Tc.Shi     自动售货机为客户提供各种饮料，饮料的价格有3种: 2元、3元、5元，投入2元可选择&amp;quot;农夫山泉&amp;quot;、&amp;ldquo;怡宝矿泉水&amp;quot;和&amp;quot;康师傅矿泉水&amp;quot;之一，投入3元可以选择&amp;quot;可口可乐”、&amp;ldquo;雪碧&amp;quot;和&amp;quot;果粒橙&amp;quot;之一，投入5元可以选择&amp;quot;奶荼&amp;rdquo;、&amp;ldquo;咖啡&amp;quot;和&amp;quot;酸奶&amp;quot;之一。编写程序，模拟用户向自动售货机投入钱币，并选择一种饮料，使用scanf.模拟用户投入钱币，使用getchar,函数模拟用户选择的饮料。(输入A，B.C代表所选择的饮料)     //自动售货机 #include&amp;lt;stdio.h&amp;gt;main() { int money;//定义整型变量 	char select; printf(&amp;#34;您投入的金额为(￥):\n&amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;money); switch (money)//识别钱数 	{ case 2://两元 	printf(&amp;#34;您投入了2元，您可以选择：\n&amp;#34;); printf(&amp;#34;A.农夫山泉\nB.怡宝矿泉水\nC.康师傅矿泉水\n&amp;#34;); printf(&amp;#34;请键入您的选择:\n&amp;#34;);//提示输入 	fflush(stdin); select = getchar(); printf(&amp;#34;您的选择为：%c\n&amp;#34;,select); switch (select) { case&amp;#39;a&amp;#39;: case&amp;#39;A&amp;#39;: printf(&amp;#34;你得到了NongFu Spring！\n&amp;#34;); break; case&amp;#39;b&amp;#39;: case&amp;#39;B&amp;#39;: printf(&amp;#34;你得到了怡宝矿泉水!\n&amp;#34;); break; case&amp;#39;c&amp;#39;: case&amp;#39;C&amp;#39;: printf(&amp;#34;你得到了康师傅矿泉水！\n&amp;#34;); break; default: printf(&amp;#34;你的选择错误，作为惩罚，机器吞币，请重新投币！\n&amp;#34;); break; } break; case 3: printf(&amp;#34;您投入了3元，您可以选择：\n&amp;#34;); printf(&amp;#34;A.Coca Cola\nB.雪碧\nC.果粒橙\n&amp;#34;); printf(&amp;#34;请键入您的选择:\n&amp;#34;); fflush(stdin); select = getchar(); printf(&amp;#34;您的选择为：%c\n&amp;#34;,select); switch (select) { case&amp;#39;a&amp;#39;: case&amp;#39;A&amp;#39;: printf(&amp;#34;你得到了Coca Cola！\n&amp;#34;); break; case&amp;#39;b&amp;#39;: case&amp;#39;B&amp;#39;: printf(&amp;#34;你得到了雪碧!</description>
    </item>
    
    <item>
      <title>第四次上机报告第三题</title>
      <link>https://xiaotian1339.github.io/posts/fourth-c3/</link>
      <pubDate>Sat, 27 Mar 2021 23:07:27 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/fourth-c3/</guid>
      <description>第四次上机报告    Tc.Shi     自动售货机为客户提供各种饮料，饮料的价格有3种: 2元、3元、5元，投入2元可选择&amp;quot;农夫山泉&amp;quot;、&amp;ldquo;怡宝矿泉水&amp;quot;和&amp;quot;康师傅矿泉水&amp;quot;之一，投入3元可以选择&amp;quot;可口可乐”、&amp;ldquo;雪碧&amp;quot;和&amp;quot;果粒橙&amp;quot;之一，投入5元可以选择&amp;quot;奶荼&amp;rdquo;、&amp;ldquo;咖啡&amp;quot;和&amp;quot;酸奶&amp;quot;之一。编写程序，模拟用户向自动售货机投入钱币，并选择一种饮料，使用scanf.模拟用户投入钱币，使用getchar,函数模拟用户选择的饮料。(输入A，B.C代表所选择的饮料)     //自动售货机 #include&amp;lt;stdio.h&amp;gt;main() { int money;//定义整型变量 	char select; printf(&amp;#34;您投入的金额为(￥):\n&amp;#34;); scanf(&amp;#34;%d&amp;#34;,&amp;amp;money); switch (money)//识别钱数 	{ case 2://两元 	printf(&amp;#34;您投入了2元，您可以选择：\n&amp;#34;); printf(&amp;#34;A.农夫山泉\nB.怡宝矿泉水\nC.康师傅矿泉水\n&amp;#34;); printf(&amp;#34;请键入您的选择:\n&amp;#34;);//提示输入 	fflush(stdin); select = getchar(); printf(&amp;#34;您的选择为：%c\n&amp;#34;,select); switch (select) { case&amp;#39;a&amp;#39;: case&amp;#39;A&amp;#39;: printf(&amp;#34;你得到了NongFu Spring！\n&amp;#34;); break; case&amp;#39;b&amp;#39;: case&amp;#39;B&amp;#39;: printf(&amp;#34;你得到了怡宝矿泉水!\n&amp;#34;); break; case&amp;#39;c&amp;#39;: case&amp;#39;C&amp;#39;: printf(&amp;#34;你得到了康师傅矿泉水！\n&amp;#34;); break; default: printf(&amp;#34;你的选择错误，作为惩罚，机器吞币，请重新投币！\n&amp;#34;); break; } break; case 3: printf(&amp;#34;您投入了3元，您可以选择：\n&amp;#34;); printf(&amp;#34;A.Coca Cola\nB.雪碧\nC.果粒橙\n&amp;#34;); printf(&amp;#34;请键入您的选择:\n&amp;#34;); fflush(stdin); select = getchar(); printf(&amp;#34;您的选择为：%c\n&amp;#34;,select); switch (select) { case&amp;#39;a&amp;#39;: case&amp;#39;A&amp;#39;: printf(&amp;#34;你得到了Coca Cola！\n&amp;#34;); break; case&amp;#39;b&amp;#39;: case&amp;#39;B&amp;#39;: printf(&amp;#34;你得到了雪碧!</description>
    </item>
    
    <item>
      <title>乱写的</title>
      <link>https://xiaotian1339.github.io/posts/%E4%B9%B1%E5%86%99%E7%9A%84/</link>
      <pubDate>Sat, 27 Mar 2021 05:07:17 -0400</pubDate>
      
      <guid>https://xiaotian1339.github.io/posts/%E4%B9%B1%E5%86%99%E7%9A%84/</guid>
      <description>这是一级标题    这是二级标题    这是三级标题    这是四级标题    这是五级标题    这是六级标题     这是加粗的文字 这是倾斜的文字` 这是斜体加粗的文字 这是加删除线的文字     这是引用的内容
 这是引用的内容
        这是引用的内容
           ![图片alt](图片地址 &amp;lsquo;&amp;lsquo;图片title&amp;rsquo;&#39;)
图片alt就是显示在图片下面的文字，相当于对图片内容的解释。 图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加    超链接名 title可加可不加
Simple 简书 百度     列表内容   列表内容   列表内容  注意：- + * 跟内容之间都要有一个空格 -*&amp;mdash;&amp;mdash;</description>
    </item>
    
  </channel>
</rss>
